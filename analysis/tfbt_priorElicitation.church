(load '/Users/mht/Documents/research/tools/church-helpers/dirichlet-score.js)
(define alldata (read-csv 'prior-exp-mturk_all_n71_normed_smoothed.csv))

(define args (regexp_split argstring ","))

(define domain (first args))
(define mh_samples (second args))
(define mh_burnin (third args))

(define L1distance
  (lambda (v1 v2)
    (sum (map (lambda (lst) (abs (- (first lst) (second lst)))) (zip v1 v2)))))


(define domain-data (filter (lambda (x) (equal? (second x) domain)) alldata))
(define domain-priors (map (lambda (x) (rest (rest (rest (rest x))))) domain-data))

(define samples
  (mh-query 
   
   ;mh_samples
   ;mh_burnin
   (string->number mh_samples)
   (string->number mh_burnin)

   (define a (exponential 1))
   (define b (dirichlet '(1 1 1 1 1 1 1 1)))
   
   (define dummy
         (map 
          (lambda (x) (factor (dirichletScore 
            (map (lambda (x) (* a x)) b)
            (map string->number x))))
          domain-priors))

   ; (define distance-to-data
   ;   (map 
   ;    (lambda (x) (L1distance (map string->number x)  (map (lambda (x) (* a x)) b))) 
   ;    domain-priors))

   (list a b)

   ; (factor (- 0 (* 3 (sum distance-to-data))))
   true
   ))

(define output-file-name (string-append 'post_alpha-beta_mh mh_samples '_ mh_burnin '_fScore_ domain '.csv))
(define output-file-name 'test.csv)

(write-csv samples output-file-name)
(define complete? 'complete)
complete?


; (define dummy
;      (map 
;       (lambda (x) (condition (equal? (map string->number x) 
;                                      (dirichlet (map (lambda (x) (* a x)) b)))))
;       domain-priors))


; ;;dirichlet-score returns log-prob of val given params.
; (define dummy
;      (map 
;       (lambda (x) (factor (dirichlet-score 
;         (map string->number x) 
;         (map (lambda (x) (* a x)) b))))
;       domain-priors))


