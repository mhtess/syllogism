
// globalStore.gensymCounter = 0
var gensym = function(){
  globalStore.gensymCounter = (globalStore.gensymCounter || 0) +1
  return "g" + globalStore.gensymCounter
}

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var dataFrame = function(rawCSV){
    return map(function(row){
        return _.object(_.zip(rawCSV[0],row))
    }, rawCSV.slice(1))
}


var discretizeBeta = function(gamma, delta, bins){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}

var marginalizeERP = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}


var mapObject = function(fn, obj){  
  return _.object(
    map(
      function(kv){
        return [kv[0], fn(kv[0], kv[1])]
      }, 
      _.pairs(obj))
  );
}


var makeERPfromObject = function(obj){
     return Enumerate(function(){
      return _.keys(obj)[discrete(_.values(obj))]
    });
}




// use first row as (header) variable names
var dataFrame = function(rawCSV){
    return map(function(row){
        return _.object(_.zip(rawCSV[0],row))
    }, rawCSV.slice(1))
}

var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}


var softmaxSpeaker = function(speakerERP, softmax){
  Enumerate(function(){
      var supp = speakerERP.support()
      var probs = map(function(s){return Math.exp(softmax*speakerERP.score([],s))}, supp)
      var response = supp[discrete(probs)]
      return response
  })
}

var addGuessing = function(myERP, phi){
    Enumerate(function(){
        var x = flip(1-phi) ? 
                    sample(myERP) :
                    uniformDraw(["all","some","not all","none"])

        // return only quantifier
        return x
    })
}
