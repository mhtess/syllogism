var fs = require('fs');
var babyparse = require('babyparse');
var present = require('present');
var glob = require('glob');

function readCSV(filename){
  return babyparse.parse(fs.readFileSync(filename, 'utf8'));
};

function getTime(){
  return present()
}

function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
function closest(arr, closestTo){

    var closest = Math.max.apply(null, arr); //Get the highest number in arr in case it match nothing.
    for(var i = 0; i < arr.length; i++){ //Loop the array
        if(arr[i] >= closestTo && arr[i] < closest) closest = arr[i]; //Check if it's higher than your number, but lower than your closest value
    }
    return closest; // return the value
};

var lsFiles = function(match){
  return glob.sync(match)
};

var erpWriter = function(erp, filename) {
 console.log('writing to csv')
 var supp = erp.support([]);
 var csvFile = fs.openSync(filename, 'w');
 fs.writeSync(csvFile,'Type,Domain,Parameter,Item,Value,Probability\n')
 supp.forEach(function(s) {supportWriter(s, Math.exp(erp.score([], s)), csvFile);})
 fs.closeSync(csvFile);
 console.log('writing complete.')
}

var equivalenceWriter = function(erp, filename, header) {
 var supp = erp.support([]);
 var csvFile = fs.openSync(filename, 'w');
 fs.writeSync(csvFile,header + ', Probability\n')
 supp.forEach(function(s) {eqSupportWriter(s, Math.exp(erp.score([], s)), csvFile);})
 fs.closeSync(csvFile);
}

var supportWriter = function(s, p, handle) {
 var sLst = _.pairs(s);
 var l = sLst.length;

 for (var i = 0; i < l; i++) {
   fs.writeSync(handle, sLst[i].join(',')+','+p+'\n');
 }
}

var eqSupportWriter = function(s, p, handle) {
  fs.writeSync(handle, s.join(',')+','+p+'\n');
}

function fillArray(value, len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(value);
  }
  return arr;
};

function wpParseFloat(x){
  return parseFloat(x);
};

function containsObject(obj, list) {
    var i;
    for (i = 0; i < list.length; i++) {
        if (_.isEqual(list[i],obj)) {
            return true;
        }
    }

    return false;
}

////////////////////////////////////////
////////// QUANTIFIER MATH /////////////
////////////////////////////////////////

var propertyTuples = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],
                      [1,0,0],[1,0,1],[1,1,0],[1,1,1]]


var factorial = function(n) {
  if(n == 0) {
    return 1
  } else {
    return n * factorial(n - 1);
  }
}

var trinomial = function(i,j,k){
  return (factorial(i+j+k)/ (factorial(i)*factorial(j)*factorial(k)))
}

var multinomialProbabilities = function(br){
  return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
          Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
}

function getAllIndexes(arr, val) {
    var indexes = [], i;
    for(i = 0; i < arr.length; i++)
        if (arr[i] === val)
            indexes.push(i);
    return indexes;
}

var extractMarginalProbs = function(propertiesOfInterest, empiricalPrior, property){
 return getAllIndexes(propertiesOfInterest, property).map(function(i){
    return _.values(empiricalPrior)[i]
  }).reduce(function(a,b){
    return a + b
  })
}

var existentialPresupp = function(n,empiricalPrior, p1){
  var i1 = ["A","B","C"].indexOf(p1)
  var propertiesOfInterest = propertyTuples.map(function(x){return x[i1]})
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, 0)
  return 1-Math.pow(x, n)
}

// joint distribution--P(none, existential presupposition)
var noAB_andEI = function(n,empiricalPrior, p1,p2){
  var i1 = ["A","B","C"].indexOf(p1)
  var i2 = ["A","B","C"].indexOf(p2)
  var propertiesOfInterest = propertyTuples.map(function(x){return [x[i1],x[i2]].join('')})
  var total = 0
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "10")
  var y = extractMarginalProbs(propertiesOfInterest,empiricalPrior, "01")
  var z = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "00")
  for (var i=1; i<=(n-1); i++){
    for (var j =1; j <= (n-i); j ++){
      var k = n - i - j;
      total += trinomial(i,j, k)*
                Math.pow(x,i)*
                Math.pow(y,j)*
                Math.pow(z, k)
    }
  }
  return total
}

// joint distribution--P(all, existential presupposition)
var allAB_andEI = function(n,empiricalPrior, p1,p2){
  var i1 = ["A","B","C"].indexOf(p1)
  var i2 = ["A","B","C"].indexOf(p2)
  var propertiesOfInterest = propertyTuples.map(function(x){return [x[i1],x[i2]].join('')})
  var total = 0
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "11")
  var y = extractMarginalProbs(propertiesOfInterest,empiricalPrior, "01")
  var z = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "00")
  for (var i=1; i<=n; i++){
    for (var j=0; j <= (n-i); j ++){
      var k = n - i - j;
      total += trinomial(i,j, k)*
                Math.pow(x,i)*
                Math.pow(y,j)*
                Math.pow(z, k)
    }
  }
  return total
}

// conditional distributions
var noAB_EI = function(n,empiricalPrior, p1, p2){
  return noAB_andEI(n,empiricalPrior, p1, p2) / (existentialPresupp(n,empiricalPrior,p1) * existentialPresupp(n,empiricalPrior, p2))
}

var allAB_EI = function(n,empiricalPrior, p1, p2){
  return allAB_andEI(n,empiricalPrior, p1, p2) / (existentialPresupp(n,empiricalPrior,p1) * existentialPresupp(n,empiricalPrior, p2))
}

// TO DO: Adapt to discrete distribution formulation (i.e. using empiricalPrior)
var allAB = function(n,p){
  return Math.pow((p*p+ (1-p)*p + (1-p)*(1-p)),n)
}
var noAB = function(n,p){
  return Math.pow(1-p*p,n)
}

function inArray(array, el) {
  for ( var i = array.length; i--; ) {
    if ( array[i] === el ) return true;
  }
  return false;
}

function isEqArrays(arr1, arr2) {
  if ( arr1.length !== arr2.length ) {
    return false;
  }
  for ( var i = arr1.length; i--; ) {
    if ( !inArray( arr2, arr1[i] ) ) {
      console.log(arr1[i])
      return false;
    }
  }
  return true;
}



module.exports = {
  readCSV: readCSV,
  isNumber: isNumber,
  fillArray: fillArray,
  lsFiles: lsFiles,
  erpWriter:erpWriter,
  equivalenceWriter: equivalenceWriter,
  closest:closest,
  getTime:getTime,
  wpParseFloat: wpParseFloat,
  containsObject: containsObject,
  noAB_EI: noAB_EI,
  allAB_EI: allAB_EI,
  isEqArrays:isEqArrays
};