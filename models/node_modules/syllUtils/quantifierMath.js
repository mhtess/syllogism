
var factorial = function(n) {
  if(n == 0) {
    return 1
  } else {
    return n * factorial(n - 1);
  }
}

var trinomial = function(i,j,k){
  return (factorial(i+j+k)/ (factorial(i)*factorial(j)*factorial(k)))
}

var multinomialProbabilities = function(br){
  return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
          Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
}

function getAllIndexes(arr, val) {
    var indexes = [], i;
    for(i = 0; i < arr.length; i++)
        if (arr[i] === val)
            indexes.push(i);
    return indexes;
}

var extractMarginalProbs = function(propertiesOfInterest, empiricalPrior, property){
 return getAllIndexes(propertiesOfInterest, property).map(function(i){
    return _.values(empiricalPrior)[i]
  }).reduce(function(a,b){
    return a + b
  })
}

var existentialPresupp = function(n,empiricalPrior, p1){
  var i1 = ["A","B","C"].indexOf(p1)
  var propertiesOfInterest = propertyTuples.map(function(x){return x[i1]})
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, 0)
  return 1-Math.pow(x, n)
}

// joint distribution--P(none, existential presupposition)
var noAB_andEI = function(n,empiricalPrior, p1,p2){
  var i1 = ["A","B","C"].indexOf(p1)
  var i2 = ["A","B","C"].indexOf(p2)
  var propertiesOfInterest = propertyTuples.map(function(x){return [x[i1],x[i2]].join('')})
  var total = 0
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "10")
  var y = extractMarginalProbs(propertiesOfInterest,empiricalPrior, "01")
  var z = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "00")
  for (var i=1; i<=(n-1); i++){
    for (var j =1; j <= (n-i); j ++){
      var k = n - i - j;
      total += trinomial(i,j, k)*
                Math.pow(x,i)*
                Math.pow(y,j)*
                Math.pow(z, k)
    }
  }
  return total
}

// joint distribution--P(all, existential presupposition)
var allAB_andEI = function(n,empiricalPrior, p1,p2){
  var i1 = ["A","B","C"].indexOf(p1)
  var i2 = ["A","B","C"].indexOf(p2)
  var propertiesOfInterest = propertyTuples.map(function(x){return [x[i1],x[i2]].join('')})
  var total = 0
  var x = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "11")
  var y = extractMarginalProbs(propertiesOfInterest,empiricalPrior, "01")
  var z = extractMarginalProbs(propertiesOfInterest, empiricalPrior, "00")
  for (var i=1; i<=n; i++){
    for (var j=0; j <= (n-i); j ++){
      var k = n - i - j;
      total += trinomial(i,j, k)*
                Math.pow(x,i)*
                Math.pow(y,j)*
                Math.pow(z, k)
    }
  }
  return total
}

// conditional distributions
var noAB_EI = function(n,empiricalPrior, p1, p2){
  return noAB_andEI(n,empiricalPrior, p1, p2) / (existentialPresupp(n,empiricalPrior,p1) * existentialPresupp(n,empiricalPrior, p2))
}

var allAB_EI = function(n,empiricalPrior, p1, p2){
  return allAB_andEI(n,empiricalPrior, p1, p2) / (existentialPresupp(n,empiricalPrior,p1) * existentialPresupp(n,empiricalPrior, p2))
}


module.exports = {
  noAB_EI: noAB_EI,
  allAB_EI: allAB_EI
};

