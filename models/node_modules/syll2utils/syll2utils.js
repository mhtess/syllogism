var glob = require('glob');
var fs = require('fs');
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
function closest(arr, closestTo){
    var closest = Math.max.apply(null, arr); //Get the highest number in arr in case it match nothing.
    for(var i = 0; i < arr.length; i++){ //Loop the array
        if(arr[i] >= closestTo && arr[i] < closest) closest = arr[i]; //Check if it's higher than your number, but lower than your closest value
    }
    return closest; // return the value
};

var lsFiles = function(match){
  return glob.sync(match)
};

function fillArray(value, len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(value);
  }
  return arr;
};

function containsObject(obj, list) {
    var i;
    for (i = 0; i < list.length; i++) {
        if (_.isEqual(list[i],obj)) {
            return true;
        }
    }
    return false;
}
var erpWriter = function(erp, filename) {
 console.log('writing to csv')
 var supp = erp.support([]);
 var csvFile = fs.openSync(filename, 'w');
 fs.writeSync(csvFile,'Parameter,Syllogism,Conclusion,BaseRate,nObjects,SpeakerOptimality,Value,Probability\n')
 supp.forEach(function(s) {supportWriter(s, Math.exp(erp.score([], s)), csvFile);})
 fs.closeSync(csvFile);
 console.log('writing complete.')
}

var openFile = function(filename) {
 // var supp = erp.support([]);
 var csvFile = fs.openSync(filename, 'w');
 // fs.writeSync(csvFile,header + '\n')
 return csvFile
 // supp.forEach(function(s) {supportWriter(s.table, Math.exp(erp.score([], s)), csvFile);})
}

var closeFile = function(handle){
 fs.closeSync(handle);
}

var writeLine = function(handle, line){
  fs.writeSync(handle, line+'\n');
}


var supportWriter = function(s, p, handle) {
 var sLst = _.pairs(s["table"]);
 var l = sLst.length;

 for (var i = 0; i < l; i++) {
   fs.writeSync(handle, sLst[i].join(',')+','+p+'\n');
 }
}

var factorial = function(n) {
  if(n == 0) {
    return 1
  } else {
    return n * factorial(n - 1);
  }
}

var trinomial = function(i,j,k){
  return (factorial(i+j+k)/ (factorial(i)*factorial(j)*factorial(k)))
}

var multinomialProbabilities = function(br){
  return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
          Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
}

function getAllIndexes(arr, val) {
    var indexes = [], i;
    for(i = 0; i < arr.length; i++)
        if (arr[i] === val)
            indexes.push(i);
    return indexes;
}

function inArray(array, el) {
  for ( var i = array.length; i--; ) {
    if ( array[i] === el ) return true;
  }
  return false;
}

function isEqArrays(arr1, arr2) {
  if ( arr1.length !== arr2.length ) {
    return false;
  }
  for ( var i = arr1.length; i--; ) {
    if ( !inArray( arr2, arr1[i] ) ) {
      console.log(arr1[i])
      return false;
    }
  }
  return true;
}

module.exports = {
  isNumber: isNumber,
  fillArray: fillArray,
  lsFiles: lsFiles,
  erpWriter:erpWriter,
  multinomialProbabilities:multinomialProbabilities,
  closest:closest,
  containsObject: containsObject,
  isEqArrays:isEqArrays,
  openFile:openFile,
  closeFile:closeFile,
  writeLine:writeLine
};