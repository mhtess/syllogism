// var multinomialProbabilities = function(br){
//   return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
//           Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
// }

// var propertyTuples = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],
//                       [1,0,0],[1,0,1],[1,1,0],[1,1,1]]



var regionTransform = function(n_objects, theta){
	var plentifulWorlds = function(pO){
	  var fOR = function(v1,v2){
	    return map2(function(e1,e2){return e1 || e2}, v1, v2)
	  }
	  return reduce(function(e1,e2){return e1 && e2}, 1, (reduce(fOR,[0,0,0],pO)))
	}

 var backgroundPrior = _.isArray(theta) ? theta : multinomialProbabilities(theta)
 Enumerate(function(){

	var regions = map(second, filter(function(p){
		var prob = Math.pow(1-p[0], n_objects)
		return flip(1-prob)
	}, _.zip(backgroundPrior, propertyTuples)))

	// var regions = regions0.length==0 ? [[0,0,0]] : regions0

	var meaning = function(quantifier) {
	  return quantifier=="all"? allSentence :
	         quantifier=="some"? someSentence :
	         quantifier=="none"? noneSentence :
	         quantifier=="not all"? notallSentence : 
	         true
	}

	var nonEmptyWorld = plentifulWorlds(regions)
	factor(nonEmptyWorld?0:-Infinity)

	return map(function(sentence){
	  	return regions.length == 0 ? null:
	  	meaning(sentence[1])(regions,
	                                sentence[0][0],
	                                sentence[0][1])
	 }, syllogisticSentences)
  })
}