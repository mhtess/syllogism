// syllogism.wppl

// webppl syllogism.wppl --require-js ./utils_wppl 


/// model parameter: number of objects

var n_objects = 4
var priorDM = 'frequency'

// mht's gensym
globalStore.gensymCounter = 0
var gensym = function(){
  globalStore.gensymCounter = globalStore.gensymCounter+1
  return "g" + globalStore.gensymCounter
}

var objects = repeat(n_objects, gensym)


var mapObject = function(fn, obj){  
  return _.object(
    map(
      function(kv){
        return [kv[0], fn(kv[0], kv[1])]
      }, 
      _.pairs(obj))
  );
}

var uniformDraw = function(x){
  return x[randomInteger(x.length)]
}


// load prior data


var priorClean = utils_wppl.parsePriorData(priorDM)

var propertyTuples = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],
                      [1,0,0],[1,0,1],[1,1,0],[1,1,1]]


var domainsSingular = ['cracker','knife','strawberry','lightbulb']

///

/// load reasoning (exp 1; or exp2) data

var drfilepath = "/Users/mht/Documents/research/syllogism/data/";
var drfile = drfilepath + "03syllogism_reasoning/syllbelief-exp-mturk_all_n250.csv";
//var drfile = drfilepath + "04syllogism_reasoning/syllbelief-exp2-mturk.csv";

var csvInput = utils_wppl.readCSV(drfile).data;


var conditionCol = csvInput[0].indexOf("condition")
var domainCol = csvInput[0].indexOf("domain")
var syllCol = csvInput[0].indexOf("syll")

var radioIndices = {"all": csvInput[0].indexOf("radio_A"),
                    "none": csvInput[0].indexOf("radio_E"), 
                    "some": csvInput[0].indexOf("radio_I"),
                    "not all": csvInput[0].indexOf("radio_O")}

var radioData = filter(function(row){
            return row[conditionCol]=='radio'
            }, csvInput)


var domains = _.uniq(map(function(row){return row[domainCol]}, radioData))
var syllogisms = _.uniq(map(function(row){return row[syllCol]}, radioData))

// var mapObject2 = function(fn, obj){  
//   return _.object(
//     map(
//       function(kv){
//         return [kv[0], fn(kv[1])]
//       }, 
//       _.pairs(obj))
//   );
// }

// for joint, map row into string of 1s and 0s
var mapObject2 = function(fn, obj){  
  return  map(function(x){return fn(x[1])}, _.pairs(obj))
}

var rowToObject = function(row){
  return mapObject2(function(index){return row[index]}, radioIndices)
}

// for marginal, map row into "YES" conclusions
var mapObject3 = function(fn, obj){  
  return  map(function(x){return fn(x[1])==1 ? x[0] : ''}, _.pairs(obj))
}

var rowToConclusion = function(row){
  return mapObject3(function(index){return row[index]}, radioIndices)
}

// organize by domain and syllogism , 
// and then within each subject, organized into an object from conclusions --> binary
// structuredData[domainName][syllName]

var structuredDataJoint = _.object(map(function(domain){
              return [domain, _.object(map(function(syll){
                return [syll, map(rowToObject,filter(function(row){
                    return (row[domainCol]==domain && row[syllCol] == syll)
                  }, radioData))
                ]
              }, syllogisms))]
            }, domains))


// organize by domain and syllogism , 
// and then within each subject, organized into an object from conclusions --> binary
// structuredData[domainName][syllName]

var structuredDataMarginal = _.object(map(function(domain){
              return [domain, _.object(map(function(syll){
                return [syll, 
                          _.filter(
                            _.flatten(
                                map(rowToConclusion,
                                    filter(function(row){
                                      return (row[domainCol]==domain && row[syllCol] == syll)
                           }, radioData))), Boolean)
                       ]
              }, syllogisms))]
            }, domains))

////

var domainSingularPlural = {
  "cracker":"crackers",
  "lightbulb":"lightbulbs",
  "strawberry":"strawberries",
  "knife":"knives"
}



// creating the syllogistic space

var quantifiers = ["all","some","none", "not all"];
var sentenceForms = [ ["A","B"],["B","A"],
                      ["B","C"],["C","B"],
                      ["A","C"],["C","A"]];

var propertyOrder = ["A","B","C"];


var conclusionOrder = [ [["C","A"],"all"],
                        [["C","A"],"none"],
                        [["C","A"],"some"],
                        [["C","A"],"not all"]];

var conclusionListOrder = [ [["C","A"],"all"],
                          [["C","A"],"none"],
                          [["C","A"],"some"],
                          [["C","A"],"not all"],
                          [[["C","A"],"all"],[["C","A"],"some"]],
                          [[["C","A"],"some"],[["C","A"],"not all"]],
                          [[["C","A"],"none"],[["C","A"],"not all"]]];


var binarizedConclusionSet = ['1000',
                              '0100',
                              '0010',
                              '0001',
                              '1010',
                              '0011',
                              '0101'];


var syllogisticSentences = _.flatten(map(function(x)
  {return map(function(y){return [y,x]} ,sentenceForms)}, quantifiers),true)

var premiseForms = {"1":[["B","A"],["C","B"]],
                  "2":[["A","B"],["C","B"]],
                  "3":[["B","A"],["B","C"]],
                  "4":[["A","B"],["B","C"]]}

var scholasticDict = {"all":"A","none":"E","some":"I","not all":"O"}

var premisesToScholasticCode = function(premises){
  var figure = _.invert(premiseForms)[premises[0][0]+','+premises[1][0]]
  var code = map(function(x){return scholasticDict[x[1]]}, premises).join('')
  return code+figure
}


var scholasticCodeToPremises = function(code){
  var invertedDict = _.invert(scholasticDict)
  var p = premiseForms[code[2]]
  var premise1 = [p[0], invertedDict[code[0]]]
  var premise2 = [p[1], invertedDict[code[1]]]
  return [premise1, premise2]
}


var isPremise = function(sentence,figure,premiseNo){
  return sentence[0] == premiseForms[figure][premiseNo-1]
}

var isConclusion = function(x){
//  return (x[0][0]=='A' || x[0][0]=='C') && (x[0][1]=='A' || x[0][1]=='C')
//  return (x[0][0]=='A') && (x[0][1]=='C')
  return (x[0][0]=='C') && (x[0][1]=='A')
}


var stateToSentence = function(state){
  return filter(function(x){return state[syllogisticSentences.indexOf(x)]
  }, syllogisticSentences)
}

var flattenSentences = function(sentences){
  return map(function(sentence){
    return [sentence[0][0], sentence[0][1], sentence[1]].join()
  },sentences)
}


var syllogisticPremisesNested = map(function(x)
  {return map(function(y)
    {return map(function(q1)
      {return map(function(q2)
        {return [[y,q1],[x,q2]]},
        quantifiers)},
      quantifiers)},
    sentenceForms.slice(0,2))},
  sentenceForms.slice(2,4))

var syllogisticPremises = _.flatten(
  _.flatten(
    _.flatten(syllogisticPremisesNested,
      true),
    true),
  true)


var premiseDictionary = {"1": _.flatten(_.flatten(syllogisticPremisesNested,true)[3],true),
                          "2": _.flatten(_.flatten(syllogisticPremisesNested,true)[2],true),
                          "3": _.flatten(_.flatten(syllogisticPremisesNested,true)[1],true),
                          "4": _.flatten(_.flatten(syllogisticPremisesNested,true)[0],true)}



// quantifier logic and helpers

var hasProperty = function(props,term)
  {return props[propertyOrder.indexOf(term)]}



var plentifulWorlds = function(propObject){
  var pO = map(second,_.pairs(propObject)) // function designed for list of lists
  var fOR = function(v1,v2){
    return map2(function(e1,e2){return e1 || e2}, v1, v2)
  }
  return reduce(function(e1,e2){return e1 && e2}, 1, (reduce(fOR,[0,0,0],pO)))
}

var allOverObjectVals = function(fn, obj)
  {return all(function(kv){return fn(kv[1])}, _.pairs(obj))}

var anyOverObjectVals = function(fn, obj)
  {return any(function(kv){return fn(kv[1])}, _.pairs(obj))}

var allSentence = function(propObject, termOne, termTwo){
  return allOverObjectVals(function(val){return hasProperty(val,termOne)? hasProperty(val,termTwo) : 1},
    propObject)
}

var someSentence = function(propObject, termOne, termTwo){
  return anyOverObjectVals(function(val){return hasProperty(val,termOne)? hasProperty(val,termTwo) : 0},
    propObject)
}

var notallSentence = function(propObject, termOne, termTwo){
  return 1 - allSentence(propObject,termOne,termTwo)
}

var noneSentence = function(propObject, termOne, termTwo){
  return 1 - someSentence(propObject,termOne,termTwo)
}

var mu = function(propObject, termOne, termTwo){
  return 1
}


// equivalence class transformation


var multinomialProbabilities = function(br){
  return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
          Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
}

var equivalentTransform = cache(function(objects, backgroundPrior){

//  var backgroundPrior = [1,1,1,1,1,1,1,1]
//  var backgroundPrior = multinomialProbabilities(0.25)


  var getProperties = function(obj) {
      var p = propertyTuples[discrete(backgroundPrior)]
      return p
    }

  Enumerate(function(){

    var propertiesOfObjects = _.object(_.zip(objects,map(getProperties,objects)))

    var meaning = function(quantifier) {
      return quantifier=="all"? allSentence :
             quantifier=="some"? someSentence :
             quantifier=="none"? noneSentence :
             quantifier=="not all"? notallSentence : 
             true
    }

    var nonEmptyWorld = plentifulWorlds(propertiesOfObjects) 
    factor(nonEmptyWorld?0:-Infinity)

    return map(function(sentence)
      {return meaning(sentence[1])(propertiesOfObjects,
                                    sentence[0][0],
                                    sentence[0][1])}, 
      syllogisticSentences)
  })
})

var pruneERP = function(myERP){
  var scr = map(function(lst)
                 {var y = myERP.score([],lst);
                  return y},
                 myERP.support())
  
  var prnScr=filter(function(lst){return lst[0] > -Infinity}, _.zip(scr,myERP.support()))
  var ps = map(function(x){return Math.exp(first(x))}, prnScr)
  var vs = map(second,prnScr)
  return Enumerate(function(){return vs[discrete(ps)]});
}


/// helpers for sentences

var flattenSentences = function(sentences){
    return map(function(sentence){
      return [sentence[0][0], sentence[0][1], sentence[1]].join()
    },sentences)
  }

// var binarizeConclusionSet = function(trueConcl){
//   return map(function(conclusion){
//     return (flattenSentences(trueConcl).indexOf(conclusion) > -1) ? 1 : 0
//   }, flattenSentences(conclusionOrder)).join('')
// }


// this considers "multiple conclusions" explicitly
var trueLists = function(trueConcls){
      _.flatten([map(function(x){return flattenSentences(conclusionListOrder).indexOf(x)}, 
                    flattenSentences(trueConcls)), 
                 flattenSentences(conclusionListOrder).indexOf(flattenSentences(trueConcls).join())])
}


// this considers "multiple conclusions" implicitly
// var trueLists = function(trueConcls){
//       map(function(x){return flattenSentences(conclusionListOrder).indexOf(x)}, 
//                     flattenSentences(trueConcls))
// }

var reasoner0 = cache(function(premises, equivalentWorlds) {
  Enumerate(function(){
    var state = sample(equivalentWorlds)
    var trueSentences = stateToSentence(state)
        // this could probably be optimized
    var flattenedSentences = flattenSentences(trueSentences) 

    var premisesTrue = flattenedSentences.indexOf(premises[0].join())!=-1 &&
                        flattenedSentences.indexOf(premises[1].join())!=-1

    var trueConclusions = filter(isConclusion, trueSentences)

    var listConclusions = trueLists(trueConclusions)
//    var whichConclusions = binarizedConclusionSet[uniformDraw(listConclusions)]
    var whichConclusions = uniformDraw(listConclusions)
//    var conclusion = uniformDraw(trueConclusions)

    factor(premisesTrue?0:-Infinity)
//    return conclusion // what is the conclusion?
    return whichConclusions // which conclusions are true?
  })
})

var experimenter1 = cache(function(QUDval, figure, equivalentWorlds) {
  Enumerate(function(){
    var premises = uniformDraw(premiseDictionary[figure])

    var R0 = reasoner0(premises, equivalentWorlds)

    factor(R0.score([],QUDval))
    return premises
  })
})

var reasoner1 = cache(function(premises, domain, alpha) {
  Enumerate(function(){
    // simple prep stuff
    var figure = _.invert(premiseForms)[premises[0][0]+','+premises[1][0]]
    var backgroundPrior = priorClean[domain]

    // sampling of worlds
//    var backoffPrior = [1,1,1,1,1,1,1,1] // uniform
    var backoffPrior = multinomialProbabilities(0.25) // binomial
    var wonkyworld = flip(0.5)
//    var wonkyworld = false 

    var equivalentWorlds = wonkyworld ?
                            pruneERP(equivalentTransform(objects, backoffPrior)):
                            pruneERP(equivalentTransform(objects, backgroundPrior))

    var state = sample(equivalentWorlds)

    // mapping from worlds to sentences, conclusions
    var trueSentences = stateToSentence(state)
    var trueConclusions = filter(isConclusion, trueSentences)
    var listConclusions = trueLists(trueConclusions)

 //   var whichConclusions = binarizedConclusionSet[uniformDraw(listConclusions)]
    var whichConclusions = uniformDraw(listConclusions)
 //   var conclusion = uniformDraw(trueConclusions)

    // recursive reasoning
    var E1 = experimenter1(whichConclusions, figure, equivalentWorlds)
//    var E1 = experimenter1(conclusion, figure, equivalentWorlds)

    factor(alpha*E1.score([],premises))
  //  return conclusion // what is the conclusion?
   return whichConclusions // which conclusions are true?
  })
})



// var guessing = cache(function(){
//   Enumerate(function(){
//     var guess = uniformDraw(['0000','1000','0100','0010','0001',
//                                   '1100','1010','1001','0110','0101','0011',
//                                   '1110','1101','0111','1011','1111'])
//     return guess
//   })
// })

var guessing = cache(function(){
  Enumerate(function(){
    var guess = uniformDraw(conclusionOrder)
    return guess.join()
  })
})


//var syll = 'AO2'
//[ 'OA1', 'IE1', 'EA3', 'AO2' ]

var fullBayesianTreatment = function() {

  var alpha = uniformDraw(utils_wppl.sequence(0.1,5,0.5))
  var phi = uniformDraw(utils_wppl.sequence(0,1,0.05))
  // var alpha = sample(uniformERP,[0,5]);
  // var phi = sample(uniformERP,[0,1]);

  var posteriorPredictive = 
    map(function(syll){return _.flatten(

      map(function(domain){

    //    var domainSylldata =  structuredDataJoint[domainSingularPlural[domain]][syll]
        var domainSylldata =  structuredDataMarginal[domainSingularPlural[domain]][syll]

        var cognitiveModel = reasoner1(scholasticCodeToPremises(syll), domain, alpha)
        //console.log(cognitiveModel.support())
        var marginals = utils_wppl.marginalsFromFullList(cognitiveModel, 
                                                        conclusionOrder, 
                                                        conclusionListOrder)

        map(function(data){

          // for marginalized data
          var dataString = 'C,A,'+data
          factor(Math.log((phi*Math.exp(guessing().score([],dataString)))+
                    ((1-phi)*marginals[dataString])))

          // for joint data
         //  var dataString = data.join('')
         // factor(Math.log((phi*Math.exp(guessing().score([],dataString)))+
         //                ((1-phi)*Math.exp(cognitiveModel.score([],dataString)))))

        }, domainSylldata)

        return map(function(kv){return kv[1]}, _.pairs(marginals))

      }, domainsSingular)
)
},
  syllogisms)


  return _.flatten([phi,alpha,posteriorPredictive])
}


// var nsamples = 1000
// var results = MH(fullBayesianTreatment,nsamples)

// var posterior = map(
//   function(value){
//     value.concat(Math.exp(results.score([], value)))
//   },
//   results.support([]))

// var header = _.flatten(
//                 map(function(s){
//                   _.flatten(map(function(d)
//                     {return map(function(c){return s+'_'+d+'_'+c[1]}, conclusionOrder)},
//                   domainsSingular))},
//                   syllogisms))
 
// header.unshift('phi','alpha')
// header.push('prob')

// posterior.unshift(header);


// utils_wppl.writeCSV(posterior, 
//   'FBT/exp1_n'+n_objects+'Marginal_posteriorD_wonky_test_'+ nsamples+'.csv');


var m = reasoner1(scholasticCodeToPremises("EA3"),"lightbulb",2)
utils_wppl.marginalsFromFullList(m, conclusionOrder, conclusionListOrder)



// priorClean['lightbulb']

//map(function(x){return priorClean[x]}, domainsSingular)
//reasoner0(scholasticCodeToPremises('AO2'),  pruneERP(equivalentTransform(objects,priorClean['lightbulb'])))// ,2)

// m

