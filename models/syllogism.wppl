var hasProperty = function(props, term){
	return props[["A","B","C"].indexOf(term)]
  // return props[term]
}

var allOverObjectVals = function(fn, obj){
	return all( function(kv){return fn(kv)}, obj)
}

var anyOverObjectVals = function(fn, obj){
	return any( function(kv){return fn(kv)}, obj)
}

var someSentence = function(obj, terms){
  var conditionalProperty = function(val){
    return hasProperty(val, terms[0]) ? hasProperty(val, terms[1]) : 0
  }
  return anyOverObjectVals(conditionalProperty, obj)
}


var allSentence = function(obj, terms){
  var conditionalProperty = function(val){
    return hasProperty(val, terms[0]) ? hasProperty(val, terms[1]) : 1
  }
  return allOverObjectVals(conditionalProperty, obj) && someSentence(obj, terms) // ALL --> SOME
}

var meaning = function(quantifier) {
   quantifier == "all" ? allSentence  :
   quantifier == "some" ? someSentence :
   quantifier == "none" ? function(obj, terms){  1 - someSentence(obj, terms) } :
   quantifier == "not all"? function(obj, terms){ 1 - allSentence(obj, terms) } :
   true
}

var quantifiers = ["all","some","none", "not all"];
var sentenceForms = [
  ["A","B"],
  // ["B","A"],
  ["B","C"],
  // ["C","B"],
  ["A","C"]//,
  // ["C","A"]
];


var quantifierSentences = _.flatten(map(
	function(x){
		return map(
			function(y){
				return {terms: y,	quantifier: x}
			} ,sentenceForms)
	}, quantifiers)
)

var repeatFlip = function(br){
  return Infer({model: function(){
    repeat(3, function(){flip(br) ? 1 : 0})
  }})
}

var base_rate = 0.25
var PropertyDist = repeatFlip(base_rate)

// var probs = [0.125,0.125,0.5,0.125,0.01,0.3,0.1,0.125]
var n = 3

var property_values = PropertyDist.support()
var probs = map(function(s){return Math.exp(PropertyDist.score(s))}, property_values)
// display(property_values)
// display(probs)


// [
//   [0,0,0], [0,0,1],
//   [0,1,0], [0,1,1],
//   [1,0,0], [1,0,1],
//   [1,1,0], [1,1,1]
// ]

var EquivalenceDistribution = Infer({model: function(){
	var objects = multinomial(normalize(probs), n)
	var objects_w_values = _.zip(objects, property_values)
  var situation = map(second, filter(first, objects_w_values))

	return map(function(sentence){
		return extend(sentence, {truthValue: meaning(sentence.quantifier)(situation, sentence.terms)})
	}, quantifierSentences)
  // return situation
}, method: "enumerate"})


///

var conclusionForm =  ["A", "C"]

var literalListener = function(premises) {
  Infer({model: function(){
    var state = sample(EquivalenceDistribution)

    var state1 = _.find(state, premises[0])
    var state2 = _.find(state, premises[1])

    condition(state1.truthValue)
    condition(state2.truthValue)

    var trueConclusions = _.filter(state, {truthValue: 1, terms: conclusionForm})
    return uniformDraw(trueConclusions).quantifier
  }, method: "enumerate"})
}

literalListener([
  { terms: [ 'B', 'C' ], quantifier: 'none'},
  { terms: [ 'A', 'B' ], quantifier: 'none'}
])
// binomialProbabilities(0.25)
// quantifierSentences
