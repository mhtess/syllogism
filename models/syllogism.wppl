// syllogism.wppl

// webppl syllogism.wppl --require-js ./simpleCSV 


// mht's gensym
globalStore.gensymCounter = 0
var gensym = function(){
  globalStore.gensymCounter = globalStore.gensymCounter+1
  return "g" + globalStore.gensymCounter
}


// load experimental data

// var dfilepath = "/Users/mht/Documents/research/syllogism/analysis/";
// var dfile = dfilepath + "max_posterior_priors" + domain + "_mh1000k.csv";

// var domainPriors = simpleCSV.readCSV(dfile).data;


// creating the syllogistic space

var quantifiers = ["all","some","none", "not all"];
var sentenceForms = [ ["A","B"],["B","A"],
                      ["B","C"],["C","B"],
                      ["A","C"],["C","A"]];

var propertyOrder = ["A","B","C"];

var propertyTuples = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],
                      [1,0,0],[1,0,1],[1,1,0],[1,1,1]]

var conclusionOrder = [ [["C","A"],"all"],
                        [["C","A"],"none"],
                        [["C","A"],"some"],
                        [["C","A"],"not all"]];

var syllogisticSentences = map(function(x)
  {return map(function(y){return [y,x]} ,sentenceForms)}, quantifiers)

var premiseForms = {"1":[["B","A"],["C","B"]],
              "2":[["A","B"],["C","B"]],
              "3":[["B","A"],["B","C"]],
              "4":[["A","B"],["B","C"]]}

var scholasticDict = {"all":"A","none":"E","some":"I","not all":"O"}

var isPremise = function(sentence,figure,premiseNo){
  return sentence[0] == premiseForms[figure][premiseNo-1]
}

var syllogisticPremisesNested = map(function(x)
  {return map(function(y)
    {return map(function(q1)
      {return map(function(q2)
        {return [[y,q1],[x,q2]]},
        quantifiers)},
      quantifiers)},
    sentenceForms.slice(0,2))}, 
  sentenceForms.slice(2,4))

var syllogisticPremises = _.flatten(
  _.flatten(
    _.flatten(syllogisticPremisesNested,
      true),
    true),
  true)

// var stateToSentence = function(state){
//   return filter()
// }


// equivalence class transformation

var equivalentTransform = function(objects, multinomialProperties, backgroundPrior){
  Enumerate(function(){

    var backgroundPrior = [1,1,1,1,1,1,1,1]

    var propertiesPrior = cache(function(obj) {
        var properties = propertyTuples[discrete(backgroundPrior)]
        return properties
      })

    var meaning = function(quantifier,properties, objects, termOne, termTwo) {
      return quantifier=="all"? state>theta :
             quantifier=="some"? state<=theta :
             quantifier=="none"? :
             quantifier=="not all"? 
             true
    }


    var ABC = propertiesPrior()
    var nonEmptyWorld = plentifulWorlds(ABC, objects)
    factor(nonEmptyWorld?0:-Infinity)
    return map(function(sentence)
      {return meaning(sentence[1],sentence[0][0],sentence[0][1])}, syllogisticSentences)
  })
}

var backgroundPrior = [1,1,1,1,1,1,1,1]

var propertiesPrior = function() {
    var properties = propertyTuples[discrete(backgroundPrior)]
    return properties
  }

repeat(5,gensym)

// var thetaPrior = function() {
//   var threshold = randomInteger(10)
//   return threshold
// }

// var utterancePrior = function() {
//   var utterances = ["generic is true",
//                     "generic is false"]
//  // var utterances = ["generic is true",
//   //                  "mu"]                    
//   var i = randomInteger(utterances.length)
//   return utterances[i]
// }

// var meaning = function(utt,state, theta) {
//   return utt=="generic is true"? state>theta :
//          utt=="generic is false"? state<=theta :
//          true
// }

// var reasoner0 = cache(function(premises, equivalentWorlds) {
//   Enumerate(function(){
//     var state = sample(equivalentWorlds)
//     var trueSentences = stateToSentence(state)
//     var conclusion = sample(filter(isConclusion, trueSentences))

//     var premisesTrue = (indexOf(premises[0], trueSentences)!=undefined &
//     					indexOf(premises[1], trueSentences)!=undefined)

//     factor(premisesTrue?0:-Infinity)
//     return conclusion
//   })
// })

// var experimenter1 = cache(function(QUDval, figure, equivalentWorlds) {
//   Enumerate(function(){
//     var premises = [sample(premise1(figure), sample(premise2(figure))]
//     var R0 = reasoner0(premises, equivalentWorlds)
//     factor(R0.score([],QUDval))
//     return premises
//   })
// })

// var reasoner1 = function(premises, figure) {
//   Enumerate(function(){
//   	var equivalentWorlds = equivalentTransform(objects, properties, ...)
//   	var state = sample(equivalentWorlds)

//     var trueSentences = stateToSentence(state)
//     var conclusion = sample(filter(isConclusion, trueSentences))

//     var E1 = experimenter1(conclusion, figure, equivalentWorlds)
//     factor(E1.score([],utterance))
//     return conclusion
//   })
// }