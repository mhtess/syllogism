// syllogism.wppl

// webppl syllogism.wppl --require-js ./utils_wppl 


// mht's gensym
globalStore.gensymCounter = 0
var gensym = function(){
  globalStore.gensymCounter = globalStore.gensymCounter+1
  return "g" + globalStore.gensymCounter
}

var mapObject = function(fn, obj){  
  return _.object(
    map(
      function(kv){
        return [kv[0], fn(kv[0], kv[1])]
      }, 
      _.pairs(obj))
  );
}

var uniformDraw = function(x){
  return x[randomInteger(x.length)]
}


// load prior data

var dfilepath = "/Users/mht/Documents/research/syllogism/data/03syllogism_prior_psychjs/";
var dfile = dfilepath + "prior-exp-mturk_collapsed_means_n71.csv";

var domainPriors = utils_wppl.readCSV(dfile).data;

var propertyTuples = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],
                      [1,0,0],[1,0,1],[1,1,0],[1,1,1]]

var csvPropTup = domainPriors[0].slice(3) // property (tuple) labels e.g. 011

// order csv data to match what's in propertyTuples
var orderPropertyTuples = function(values){
  return map(function(x){
    return utils_wppl.wpParseFloat(values[csvPropTup.indexOf(x.join(""))])
  }, propertyTuples)
}

// create assoc. array out of domainName and ordered probabilities
var priorClean = _.object(map(function(x){
  return [x[1],orderPropertyTuples(x.slice(3))]
},domainPriors.slice(1)))

var domainsSingular = ['cracker','knife','strawberry','lightbulb']

///

/// load reasoning (exp 1) data

var drfilepath = "/Users/mht/Documents/research/syllogism/data/03syllogism_reasoning/";
var drfile = drfilepath + "syllbelief-exp-mturk_all_n250.csv";

var csvInput = utils_wppl.readCSV(drfile).data;


var conditionCol = csvInput[0].indexOf("condition")
var domainCol = csvInput[0].indexOf("domain")
var syllCol = csvInput[0].indexOf("syll")

var radioIndices = {"all": csvInput[0].indexOf("radio_A"),
                    "none": csvInput[0].indexOf("radio_E"), 
                    "some": csvInput[0].indexOf("radio_I"),
                    "not all": csvInput[0].indexOf("radio_O")}

var radioData = filter(function(row){
            return row[conditionCol]=='radio'
            }, csvInput)


var domains = _.uniq(map(function(row){return row[domainCol]}, radioData))
var syllogisms = _.uniq(map(function(row){return row[syllCol]}, radioData))

var mapObject2 = function(fn, obj){  
  return _.object(
    map(
      function(kv){
        return [kv[0], fn(kv[1])]
      }, 
      _.pairs(obj))
  );
}

var rowToObject = function(row){
  return mapObject2(function(index){return row[index]}, radioIndices)
}

// organize by domain and syllogism , and then within each subject, organized into an object from conclusions --> binary
// structuredData[domainName][syllName]

var structuredData = _.object(map(function(domain){
              return [domain, _.object(map(function(syll){
                return [syll, map(rowToObject,filter(function(row){
                    return (row[domainCol]==domain && row[syllCol] == syll)
                  }, radioData))
                ]
              }, syllogisms))]
            }, domains))

////

var domainSingularPlural = {
  "cracker":"crackers",
  "lightbulb":"lightbulbs",
  "strawberry":"strawberries",
  "knife":"knives"
}

/// model parameter: number of objects

var n_objects = 3
var objects = repeat(n_objects, gensym)

// creating the syllogistic space

var quantifiers = ["all","some","none", "not all"];
var sentenceForms = [ ["A","B"],["B","A"],
                      ["B","C"],["C","B"],
                      ["A","C"],["C","A"]];

var propertyOrder = ["A","B","C"];


var conclusionOrder = [ [["C","A"],"all"],
                        [["C","A"],"none"],
                        [["C","A"],"some"],
                        [["C","A"],"not all"]];

var conclusionListOrder = [ [["C","A"],"all"],
                          [["C","A"],"none"],
                          [["C","A"],"some"],
                          [["C","A"],"not all"],
                          [[["C","A"],"all"],[["C","A"],"some"]],
                          [[["C","A"],"some"],[["C","A"],"not all"]],
                          [[["C","A"],"none"],[["C","A"],"not all"]]];


var syllogisticSentences = _.flatten(map(function(x)
  {return map(function(y){return [y,x]} ,sentenceForms)}, quantifiers),true)

var premiseForms = {"1":[["B","A"],["C","B"]],
                  "2":[["A","B"],["C","B"]],
                  "3":[["B","A"],["B","C"]],
                  "4":[["A","B"],["B","C"]]}

var scholasticDict = {"all":"A","none":"E","some":"I","not all":"O"}

var isPremise = function(sentence,figure,premiseNo){
  return sentence[0] == premiseForms[figure][premiseNo-1]
}

var isConclusion = function(x){
//  return (x[0][0]=='A' || x[0][0]=='C') && (x[0][1]=='A' || x[0][1]=='C')
//  return (x[0][0]=='A') && (x[0][1]=='C')
  return (x[0][0]=='C') && (x[0][1]=='A')
}


var stateToSentence = function(state){
  return filter(function(x){return state[syllogisticSentences.indexOf(x)]
  }, syllogisticSentences)
}

var flattenSentences = function(sentences){
  return map(function(sentence){
    return [sentence[0][0], sentence[0][1], sentence[1]].join()
  },sentences)
}


var syllogisticPremisesNested = map(function(x)
  {return map(function(y)
    {return map(function(q1)
      {return map(function(q2)
        {return [[y,q1],[x,q2]]},
        quantifiers)},
      quantifiers)},
    sentenceForms.slice(0,2))},
  sentenceForms.slice(2,4))

var syllogisticPremises = _.flatten(
  _.flatten(
    _.flatten(syllogisticPremisesNested,
      true),
    true),
  true)


var premiseDictionary = {"1": _.flatten(_.flatten(syllogisticPremisesNested,true)[3],true),
                          "2": _.flatten(_.flatten(syllogisticPremisesNested,true)[2],true),
                          "3": _.flatten(_.flatten(syllogisticPremisesNested,true)[1],true),
                          "4": _.flatten(_.flatten(syllogisticPremisesNested,true)[0],true)}



// quantifier logic and helpers

var hasProperty = function(props,term)
  {return props[propertyOrder.indexOf(term)]}



var plentifulWorlds = function(propObject){
  var pO = map(second,_.pairs(propObject)) // function designed for list of lists
  var fOR = function(v1,v2){
    return map2(function(e1,e2){return e1 || e2}, v1, v2)
  }
  return reduce(function(e1,e2){return e1 && e2}, 1, (reduce(fOR,[0,0,0],pO)))
}

var allOverObjectVals = function(fn, obj)
  {return all(function(kv){return fn(kv[1])}, _.pairs(obj))}

var anyOverObjectVals = function(fn, obj)
  {return any(function(kv){return fn(kv[1])}, _.pairs(obj))}

var allSentence = function(propObject, termOne, termTwo){
  return allOverObjectVals(function(val){return hasProperty(val,termOne)? hasProperty(val,termTwo) : 1},
    propObject)
}

var someSentence = function(propObject, termOne, termTwo){
  return anyOverObjectVals(function(val){return hasProperty(val,termOne)? hasProperty(val,termTwo) : 0},
    propObject)
}

var notallSentence = function(propObject, termOne, termTwo){
  return 1 - allSentence(propObject,termOne,termTwo)
}

var noneSentence = function(propObject, termOne, termTwo){
  return 1 - someSentence(propObject,termOne,termTwo)
}

var mu = function(propObject, termOne, termTwo){
  return 1
}


// equivalence class transformation


var multinomialProbabilities = function(br){
  return [Math.pow(1-br,3),Math.pow(1-br,2)*br,Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),
          Math.pow(1-br,2)*br,Math.pow(br,2)*(1-br),Math.pow(br,2)*(1-br),Math.pow(br,3)]
}

var equivalentTransform = cache(function(objects, backgroundPrior){

//  var backgroundPrior = [1,1,1,1,1,1,1,1]
//  var backgroundPrior = multinomialProbabilities(0.25)


  var getProperties = function(obj) {
      var p = propertyTuples[discrete(backgroundPrior)]
      return p
    }

  Enumerate(function(){

    var propertiesOfObjects = _.object(_.zip(objects,map(getProperties,objects)))

    var meaning = function(quantifier) {
      return quantifier=="all"? allSentence :
             quantifier=="some"? someSentence :
             quantifier=="none"? noneSentence :
             quantifier=="not all"? notallSentence : 
             true
    }

    var nonEmptyWorld = plentifulWorlds(propertiesOfObjects) 
    factor(nonEmptyWorld?0:-Infinity)

    return map(function(sentence)
      {return meaning(sentence[1])(propertiesOfObjects,
                                    sentence[0][0],
                                    sentence[0][1])}, 
      syllogisticSentences)
  })
})

var pruneERP = cache(function(myERP){
  var scr = map(function(lst)
                 {var y = myERP.score([],lst);
                  return y},
                 myERP.support())
  
  var prnScr=filter(function(lst){return lst[0] > -Infinity}, _.zip(scr,myERP.support()))
  var ps = map(first,prnScr)
  var vs = map(second,prnScr)
  return Enumerate(function(){return vs[discrete(ps)]});
})


/// helpers for sentences

var flattenSentences = function(sentences){
    return map(function(sentence){
      return [sentence[0][0], sentence[0][1], sentence[1]].join()
    },sentences)
  }

var binarizeConclusionSet = function(trueConcl){
  return map(function(conclusion){
    return (flattenSentences(trueConcl).indexOf(conclusion) > -1) ? 1 : 0
  }, flattenSentences(conclusionOrder)).join('')
}


// this considers "multiple conclusions" explicitly
var trueLists = function(trueConcls){
      _.flatten([map(function(x){return flattenSentences(conclusionListOrder).indexOf(x)}, 
                    flattenSentences(trueConcls)), 
                 flattenSentences(conclusionListOrder).indexOf(flattenSentences(trueConcls).join())])
}

// this considers "multiple conclusions" implicitly
// var trueLists = function(trueConcls){
//       map(function(x){return flattenSentences(conclusionListOrder).indexOf(x)}, 
//                     flattenSentences(trueConcls))
// }

var reasoner0 = cache(function(premises, equivalentWorlds) {
  Enumerate(function(){
    var state = sample(equivalentWorlds)
    var trueSentences = stateToSentence(state)
        // this could probably be optimized
    var flattenedSentences = flattenSentences(trueSentences) 

    var premisesTrue = flattenedSentences.indexOf(premises[0].join())!=-1 &&
                        flattenedSentences.indexOf(premises[1].join())!=-1

    // var premisesTrue = premises=='mu' ? true:
    //                     flattenedSentences.indexOf(premises[0].join())!=-1 &&
    //                     flattenedSentences.indexOf(premises[1].join())!=-1

    var trueConclusions = filter(isConclusion, trueSentences)

    var listConclusions = trueLists(trueConclusions)
  
    var whichConclusions = uniformDraw(listConclusions)
//    var conclusion = uniformDraw(trueConclusions)
//    console.log(trueConclusions)
    factor(premisesTrue?0:-Infinity)
//    return conclusion // what is the conclusion?
    return whichConclusions // which conclusions are true?
  })
})

var experimenter1 = cache(function(QUDval, figure, equivalentWorlds) {
  Enumerate(function(){
    var premises = uniformDraw(premiseDictionary[figure])
    // var availablePremises = premiseDictionary[figure]
    // availablePremises.push('mu')
    // var premises = uniformDraw(availablePremises)

    var R0 = reasoner0(premises, equivalentWorlds)
 //   console.log(premises)
//    console.log(R0.score([],QUDval))
    factor(R0.score([],QUDval))
    return premises
  })
})

var reasoner1 = function(premises, domain, alpha) {
  Enumerate(function(){
    // simple prep stuff
    var figure = _.invert(premiseForms)[premises[0][0]+','+premises[1][0]]
    var backgroundPrior = priorClean[domain]

    // sampling of worlds
    var backoffPrior = [1,1,1,1,1,1,1,1] // uniform
//    var backoffPrior = multinomialProbabilities(0.25) // binomial
//    var wonkyworld = flip(0.5)
    var wonkyworld = true // only use backoffPrior

    var equivalentWorlds = wonkyworld?
                            pruneERP(equivalentTransform(objects, backoffPrior)):
                            pruneERP(equivalentTransform(objects,backgroundPrior))

    var state = sample(equivalentWorlds)

//    console.log((state[5]==1 && state[17] ==1))
//    console.log(equivalentWorlds.score([],state))

    // mapping from worlds to sentences, conclusions
    var trueSentences = stateToSentence(state)
    var trueConclusions = filter(isConclusion, trueSentences)
    var listConclusions = trueLists(trueConclusions)

    var whichConclusions = uniformDraw(listConclusions)
   // var conclusion = uniformDraw(trueConclusions)

    // recursive reasoning
 //   console.log(trueConclusions)
    var E1 = experimenter1(whichConclusions, figure, equivalentWorlds)
    //    console.log(E1.score([],premises))

  //  console.log(E1.support())
 //   console.log(premises)
 //   console.log(E1.score([],premises))
    factor(alpha*E1.score([],premises))
  //  return conclusion // what is the conclusion?
   return whichConclusions // which conclusions are true?
  })
}




//var results = map(reasoner1,syllogisticPremises)
//results
var alpha = 2

//pruneERP(equivalentTransform(objects,[1,1,1,1,1,1,1,1]))

var results = reasoner1(syllogisticPremises[48], 'cracker', alpha)
var posterior = utils_wppl.marginalsFromFullList(results, conclusionOrder, conclusionListOrder)

posterior
//var results = reasoner0(syllogisticPremises[0], equivalentTransform(objects,[1,1,1,1,1,1,1,1]))


//var posterior = simpleCSV.unrollConclusionList(results,conclusionListOrder)
//posterior
//simpleCSV.normalize(posterior)
//results
//conclusionOrder
//results
//unrollConclusionList(results)

//conclusionObject

//experimenter1([0,2,4], 4, equivalentTransform(objects,[1,1,1,1,1,1,1,1]))//.score([],syllogisticPremises[0])


//_.unzip(prnScr)
//_.zip(scr,xform.support())
// var conclusionListOrder = [ [["C","A"],"all"],
//                           [["C","A"],"none"],
//                           [["C","A"],"some"],
//                           [["C","A"],"not all"],
//                           [[["C","A"],"all"],[["C","A"],"some"]],
//                           [[["C","A"],"some"],[["C","A"],"not all"]],
//                           [[["C","A"],"none"],[["C","A"],"not all"]]];

//reasoner0(syllogisticPremises[1], equivalentTransform(objects,[1,1,1,1,1,1,1,1]))

// var state = sample(equivalentTransform(objects,[1,1,1,1,1,1,1,1]))
// var trueSentences = stateToSentence(state)
//     // this could probably be optimized
// var flattenedSentences = flattenSentences(trueSentences) 


// premiseDictionary[1].push('hi')
// premiseDictionary[1]

//syllogisticPremises[0]
//syllogisticPremises[0].join()
